suite: misc tests on app-proxy templates generation
templates:
  - app-proxy/deployment.yaml
  - app-proxy/config.yaml
tests:
- it: overriding of environment variables on main container
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.env.PORT: '8787'
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: PORT
        value: "8787"
- it: adding environment variables on main container
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.env.SOME_ENV: 'test'
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: SOME_ENV
        value: test
- it: overriding of argoCD and workflows Url through values
  template: 'app-proxy/config.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.config.argoCdUrl: 'https://test-argocd'
    app-proxy.config.argoWorkflowsUrl: 'https://test-workflows'
  asserts:
  - equal:
      path: data.argoCdUrl
      value: https://test-argocd
  - equal:
      path: data.argoWorkflowsUrl
      value: https://test-workflows
- it: setting security context on main container
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.securityContext.runAsUser: 1000
  asserts:
  - equal:
      path: spec.template.spec.containers[0].securityContext.runAsUser
      value: 1000
- it: override readiness and liveness probes values
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.readinessProbe.initialDelaySeconds: 1
    app-proxy.readinessProbe.periodSeconds: 1
    app-proxy.readinessProbe.timeoutSeconds: 1
    app-proxy.readinessProbe.successThreshold: 1
    app-proxy.readinessProbe.failureThreshold: 1
    app-proxy.livenessProbe.initialDelaySeconds: 1
    app-proxy.livenessProbe.periodSeconds: 1
    app-proxy.livenessProbe.timeoutSeconds: 1
    app-proxy.livenessProbe.successThreshold: 1
    app-proxy.livenessProbe.failureThreshold: 1
  asserts:
  - equal:
      path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
      value: 1
  - equal:
      path: spec.template.spec.containers[0].readinessProbe.periodSeconds
      value: 1
  - equal:
      path: spec.template.spec.containers[0].readinessProbe.timeoutSeconds
      value: 1
  - equal:
      path: spec.template.spec.containers[0].readinessProbe.successThreshold
      value: 1
  - equal:
      path: spec.template.spec.containers[0].readinessProbe.failureThreshold
      value: 1
  - equal:
      path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
      value: 1
  - equal:
      path: spec.template.spec.containers[0].livenessProbe.periodSeconds
      value: 1
  - equal:
      path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
      value: 1
  - equal:
      path: spec.template.spec.containers[0].livenessProbe.successThreshold
      value: 1
  - equal:
      path: spec.template.spec.containers[0].livenessProbe.failureThreshold
      value: 1

- it: setting node selector
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.nodeSelector:
      test.io/node: "test"
  asserts:
  - equal:
      path: spec.template.spec.nodeSelector
      value:
        test.io/node: "test"

- it: setting tolerations
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.tolerations:
      - key: "arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
  asserts:
  - contains:
      path: spec.template.spec.tolerations
      content:
        key: "arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"

- it: setting affinity
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: topology.kubernetes.io/zone
              operator: In
              values:
              - antarctica-east1
              - antarctica-west1
  asserts:
  - equal:
      path: spec.template.spec.affinity
      value:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - antarctica-east1
                - antarctica-west1

- it: add some other config option to app-proxy
  template: 'app-proxy/config.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.config.myconf: 'test'
  asserts:
  - equal:
      path: data.myconf
      value: test

- it: Release name exists in app-proxy env
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  release:
    name: my-release
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: HELM_RELEASE_NAME
        value: my-release

- it: Adding extra volumes and volume mounts
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    app-proxy.extraVolumes:
    - name: my-secret
      secret:
        secretName: my-secret
        defaultMode: 420
        optional: true
    app-proxy.extraVolumeMounts:
    - name: my-secret
      mountPath: /my-secret
    app-proxy.initContainer.extraVolumeMounts:
    - name: my-secret
      mountPath: /my-secret
  asserts:
  - contains:
      path: spec.template.spec.volumes
      content:
        name: my-secret
        secret:
          secretName: my-secret
          defaultMode: 420
          optional: true
  - contains:
      path: spec.template.spec.containers[0].volumeMounts
      content:
        name: my-secret
        mountPath: /my-secret
  - contains:
      path: spec.template.spec.initContainers[0].volumeMounts
      content:
        name: my-secret
        mountPath: /my-secret

- it: accountId appears in app-proxy env if provided - used in hosted
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.codefresh.accountId: "asd123"
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: TARGET_RUNTIME_ACCOUNT_ID
        value: "asd123"