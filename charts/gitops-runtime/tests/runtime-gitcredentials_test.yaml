suite: test runtime git credentials in app proxy
templates:
  - app-proxy/deployment.yaml
  - git-password-secret.yaml

tests:
- it: secret created for plain text value
  template: 'git-password-secret.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.password.value: bar
  asserts:
  - hasDocuments:
      count: 1

- it: secret not created for secretKeyRef
  template: 'git-password-secret.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.password.secretKeyRef.name: bar
    global.runtime.gitCredentials.password.secretKeyRef.key: foo
  asserts:
  - hasDocuments:
      count: 0

- it: plain string value
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.username: foo
    global.runtime.gitCredentials.password.value: bar
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: GIT_USERNAME
        value: foo
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: GIT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: test-runtime1-git-password
            key: password
            optional: true

- it: secretKeyRef value propagted correctly
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.password.secretKeyRef.name: bar
    global.runtime.gitCredentials.password.secretKeyRef.key: foo
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: GIT_USERNAME
        value: username
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: GIT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: bar
            key: foo
            optional: true

- it: Plain text value takes precedence
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.password.secretKeyRef.name: bar
    global.runtime.gitCredentials.password.secretKeyRef.key: foo
    global.runtime.gitCredentials.password.value: bar
  asserts:
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: GIT_USERNAME
        value: username
  - contains:
      path: spec.template.spec.containers[0].env
      content:
        name: GIT_PASSWORD
        valueFrom:
          secretKeyRef:
            name: test-runtime1-git-password
            key: password
            optional: true

- it: Missing secretKeyRef name - should fail
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.password.secretKeyRef.key: foo
  asserts:
  - failedTemplate:
       errorMessage: 'secretKeyRef for global.runtime.gitCredentials.password illegal - must have name field'

- it: Missing secretKeyRef key - should fail
  template: 'app-proxy/deployment.yaml'
  values:
  - ./values/mandatory-values.yaml
  set:
    global.runtime.gitCredentials.password.secretKeyRef.name: foo
  asserts:
  - failedTemplate:
       errorMessage: 'secretKeyRef for global.runtime.gitCredentials.password illegal - must have key field'
