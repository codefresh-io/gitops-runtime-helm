suite: Test External ArgoCD with GitOps Runtime
templates:
  - app-proxy/config.yaml
  - app-proxy/deployment.yaml
  - gitops-operator/*
  - cf-argocd-extras/*
  - _components/cf-argocd-extras/*
  - _components/gitops-operator/*
  - app-proxy/external-argocd-token.yaml
  - codefresh-cm.yaml
tests:
  - it: app-proxy ConfigMap should have valid ArgoCd URL
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    asserts:
      - equal:
          path: data.argoCdUrl
          value: http://my-argocd-server

  - it: app-proxy ConfigMap should have valid default ArgoCd Username
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    asserts:
      - equal:
          path: data.argoCdUsername
          value: admin

  - it: app-proxy ConfigMap should have valid ArgoCd Username with override
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    set:
      global.external-argo-cd.auth.username: adminoverride
    asserts:
      - equal:
          path: data.argoCdUsername
          value: adminoverride

  - it: app-proxy ConfigMap override priority should prefer value from app-proxy.config (for backward compatibility)
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    set:
      global.external-argo-cd.auth.username: external-adminoverride
      app-proxy.config.argoCdUsername: app-proxy-adminoverride
    asserts:
      - equal:
          path: data.argoCdUsername
          value: app-proxy-adminoverride

  - it: app-proxy ConfigMap should *not* have username, if auth.type is token
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: some-token
    asserts:
      - notExists:
          path: data.argoCdUsername

  - it: app-proxy ConfigMap should have isExternalArgoCD key set to true
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    asserts:
      - equal:
          path: data.isExternalArgoCD
          value: "true"

  - it: app-proxy Deployment should have valid deafult ARGO_CD_USERNAME env var if auth.type is password
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_USERNAME
            valueFrom:
              secretKeyRef:
                key: argoCdUsername
                name: cap-app-proxy-cm

  - it: app-proxy Deployment should have valid deafult ARGO_CD_PASSWORD env var set via passwordSecretKeyRef
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: argocd-initial-admin-secret

  - it: app-proxy Deployment should have valid ARGO_CD_PASSWORD env var set via passwordSecretKeyRef override
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.passwordSecretKeyRef.name: name-override
      global.external-argo-cd.auth.passwordSecretKeyRef.key: key-override
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: key-override
                name: name-override

  - it: app-proxy Deploymeny should have valid ARGO_CD_PASSWORD env var set via plaintext password
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.password: token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: token
                name: gitops-runtime-argo-cd-password

  - it: app-proxy Deployment should *not* have ARGO_CD_TOKEN env var if auth.type is password
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    asserts:
      - notContains:
          any: true
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN

  - it: app-proxy Deployment should *not* have ARGO_CD_USERNAME env var if auth.type is token
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: plaintexttoken
    asserts:
      - notContains:
          any: true
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_USERNAME

  - it: app-proxy Deployment should *not* have ARGO_CD_PASSWORD env var if auth.type is token
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: plaintexttoken
    asserts:
      - notContains:
          any: true
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_PASSWORD

  - it: app-proxy Deployment should have valid ARGO_CD_TOKEN env var set via plaintext token
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: plaintexttoken
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: gitops-runtime-argo-cd-token

  - it: app-proxy Deployment should have valid ARGO_CD_TOKEN env var set via tokenSecretKeyRef
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN
            valueFrom:
              secretKeyRef:
                key: my-token
                name: my-argocd-secret

  - it: gitops-operator Deployment should have valid ARGO_CD_TOKEN_SECRET_NAME env var set via tokenSecretKeyRef
    values:
      - ./values/mandatory-values.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-token-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: my-argocd-token-secret

  - it: gitops-operator Deployment should have valid ARGO_CD_TOKEN_SECRET_KEY env var set via tokenSecretKeyRef
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-token-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: my-token

  - it: gitops-operator Deployment should have valid ARGO_CD_TOKEN_SECRET_NAME env var set via plaintext token
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: "plaintexttoken"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: gitops-runtime-argo-cd-token

  - it: gitops-operator Deployment should have valid ARGO_CD_TOKEN_SECRET_KEY env var set via plaintext token
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: "plaintexttoken"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: token

  - it: gitops-operator Deployment should have valid default ARGO_CD_TOKEN_SECRET_NAME env var
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: argocd-token

  - it: gitops-operator Deployment should have valid default ARGO_CD_TOKEN_SECRET_KEY env var
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: token

  - it: gitops-operator Deployment should have valid ARGO_CD_URL env var
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: gitops-operator/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_URL
            value: my-argocd-server:80

  - it: event-reporter ConfigMap should have valid ArgoCd URL
    template: cf-argocd-extras/event-reporter/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["argocd.server"]
          value: my-argocd-server:80

  - it: event-reporter ConfigMap should have valid Redis URL
    template: cf-argocd-extras/event-reporter/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["redis.server"]
          value: my-argocd-redis:6379

  - it: event-reporter ConfigMap should have valid Sources Server address
    template: cf-argocd-extras/event-reporter/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["sources.server"]
          value: http://sources-server

  - it: event-reporte ConfigMap should have valid Repo Server URL
    template: cf-argocd-extras/event-reporter/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["repo.server"]
          value: my-argocd-repo-server:8081

  - it: event-reporter StatefulSet should have valid default ARGO_CD_TOKEN_SECRET_NAME env var
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: argocd-token

  - it: event-reporter StatefulSet should have valid default ARGO_CD_TOKEN_SECRET_KEY env var
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: token

  - it: event-reporter StatefulSet should have valid ARGO_CD_TOKEN_SECRET_NAME env var set via tokenSecretKeyRef
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-token-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: my-argocd-token-secret

  - it: event-reporter StatefulSet should have valid ARGO_CD_TOKEN_SECRET_KEY env var set via tokenSecretKeyRef
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-token-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: my-token

  - it: event-reporter StatefulSet should have valid ARGO_CD_TOKEN_SECRET_NAME env var set via plaintext token
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: "plaintexttoken"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: gitops-runtime-argo-cd-token

  - it: event-reporter StatefulSet should have valid ARGO_CD_TOKEN_SECRET_KEY env var set via plaintext token
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: "plaintexttoken"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: token

  - it: sources-server ConfigMap should have valid ArgoCd URL
    template: cf-argocd-extras/sources-server/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["argocd.server"]
          value: my-argocd-server:80

  - it: sources-server ConfigMap should have valid Redis URL
    template: cf-argocd-extras/sources-server/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["redis.server"]
          value: my-argocd-redis:6379

  - it: sources-server ConfigMap should have valid Repo Server URL
    template: cf-argocd-extras/sources-server/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - equal:
          path: data["repo.server"]
          value: my-argocd-repo-server:8081

  - it: sources-server Deployment should have valid default ARGO_CD_TOKEN_SECRET_NAME env var
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: argocd-token

  - it: sources-server Deployment should have valid default ARGO_CD_TOKEN_SECRET_KEY env var
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: token

  - it: sources-server Deployment should have valid ARGO_CD_TOKEN_SECRET_NAME env var set via tokenSecretKeyRef
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-token-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: my-argocd-token-secret

  - it: sources-server Deployment should have valid ARGO_CD_TOKEN_SECRET_KEY env var set via tokenSecretKeyRef
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.tokenSecretKeyRef.name: my-argocd-token-secret
      global.external-argo-cd.auth.tokenSecretKeyRef.key: my-token
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: my-token

  - it: sources-server Deployment should have valid ARGO_CD_TOKEN_SECRET_NAME env var set via plaintext token
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: "plaintexttoken"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_NAME
            value: gitops-runtime-argo-cd-token

  - it: sources-server Deployment should have valid ARGO_CD_TOKEN_SECRET_KEY env var set via plaintext token
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: "plaintexttoken"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_TOKEN_SECRET_KEY
            value: token

  - it: should require ArgoCd redis address if it's not provided
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.redis: null
    asserts:
      - failedTemplate:
          errorMessage: "ArgoCD is not enabled and .Values.global.external-argo-cd.redis is not set"

  - it: should require ArgoCd repoServer address if it's not provided
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.repoServer: null
    asserts:
      - failedTemplate:
          errorMessage: "ArgoCD is not enabled and .Values.global.external-argo-cd.repoServer is not set"

  - it: should required only allowed auth type for external ArgoCd
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/deployment.yaml
    set:
      global.external-argo-cd.auth.type: invalid
    asserts:
      - failedTemplate:
          errorMessage: "Invalid value for .Values.global.external-argo-cd.auth.type: invalid. Allowed values are: [password token]"

  - it: event-reporter StatefulSet should have valid ARGOCD_SERVER_ROOTPATH env var
    template: cf-argocd-extras/event-reporter/statefulset.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.server.rootpath: /argocd
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGOCD_SERVER_ROOTPATH
            value: /argocd

  - it: sources-server Deployment should have valid ARGOCD_SERVER_ROOTPATH env var
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.server.rootpath: /argocd
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGOCD_SERVER_ROOTPATH
            value: /argocd

  - it: app-proxy ConfigMap should have valid ArgoCD url with rootpath suffix
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    template: app-proxy/config.yaml
    set:
      global.external-argo-cd.server.rootpath: /argocd
    asserts:
      - equal:
          path: data.argoCdUrl
          value: http://my-argocd-server/argocd

  - it: gitops-operator Deployment should have valid ARGO_CD_URL env var with rootpath suffix
    template: gitops-operator/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.server.rootpath: /argocd
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ARGO_CD_URL
            value: my-argocd-server:80/argocd

  - it: gitops-runtime-argo-cd-token secret should be create when `auth.type=token` and `auth.token` are set
    template: app-proxy/external-argocd-token.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: mytoken
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: gitops-runtime-argo-cd-token
      - isNotNullOrEmpty:
          path: stringData.token

  - it: gitops-runtime-argo-cd-password secret should be create when `auth.type=password` and `auth.password` are set
    template: app-proxy/external-argocd-token.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: password
      global.external-argo-cd.auth.password: mypassword
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: gitops-runtime-argo-cd-password
      - isNotNullOrEmpty:
          path: stringData.token

  - it: codefresh-cm ConfigMap should have event-reporter and sources-server
    template: codefresh-cm.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - matchRegex:
          path: data.components
          pattern: "name: event-reporter"
      - matchRegex:
          path: data.components
          pattern: "name: sources-server"

  - it: should require ArgoCd token if auth.type=token is set and no token is provided
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.auth.type: token
      global.external-argo-cd.auth.token: null
      global.external-argo-cd.auth.tokenSecretKeyRef.name: null
      global.external-argo-cd.auth.tokenSecretKeyRef.key: null
    asserts:
      - failedTemplate:
          errorMessage: ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.auth.tokenSecretKeyRef.name is required"

  - it: should require ArgoCd server address if it's not provided
    template: cf-argocd-extras/sources-server/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    set:
      global.external-argo-cd.server: null
    asserts:
      - failedTemplate:
          errorMessage: "ArgoCD is not enabled and .Values.global.external-argo-cd.server is not set"
