# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: argo-gateway tests
templates:
  - argo-gateway/**
tests:
  - it: Argo Api Gateway ConfigMap should have valid data
    template: argo-gateway/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    asserts:
      - equal:
          path: data["argocd.server"]
          value: argocd-server:80
      - equal:
          path: data["redis.server"]
          value: runtime-redis:6379
      - equal:
          path: data["repo.server"]
          value: argocd-repo-server:8081

  - it: Argo Api Gateway Deployment should have valid matchLabel selectors
    template: argo-gateway/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    asserts:
      - equal:
          path: spec.selector.matchLabels
          value:
            app.kubernetes.io/name: argo-gateway
            app.kubernetes.io/instance: RELEASE-NAME
      - equal:
          path: spec.template.metadata.labels
          value:
            app.kubernetes.io/name: argo-gateway
            app.kubernetes.io/instance: RELEASE-NAME

  - it: Argo Api Gateway Service should have valid matchLabel selectors
    template: argo-gateway/service.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    asserts:
      - equal:
          path: spec.selector
          value:
            app.kubernetes.io/name: argo-gateway
            app.kubernetes.io/instance: RELEASE-NAME

  - it: Argo Api Gateway should be deployed with forked ArgoCD
    template: argo-gateway/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: argo-gateway

  - it: Argo Api Gateway should be deployed with external OSS ArgoCD
    template: argo-gateway/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
      - ./values/external-argocd-values.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: argo-gateway

  - it: Argo Api Gateway ConfigMap should have valid redis-ha url
    template: argo-gateway/configmap.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    set:
      redis-ha:
        enabled: true
    asserts:
      - equal:
          path: data["redis.server"]
          value: runtime-redis-ha-haproxy:6379

  - it: Argo Api Gateway should have CODEFRESH_SSL_CERT_PATH env var when .Values.global.codefresh.tls.caCerts.secret.create is true
    template: argo-gateway/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    set:
      global:
        codefresh:
          tls:
            caCerts:
              secret:
                create: true
                key: ca-bundle.crt
                content: |
                  -----BEGIN CERTIFICATE-----
                  MIID...
                  -----END CERTIFICATE-----
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == 'CODEFRESH_SSL_CERT_PATH')].value
          value: /app/config/codefresh-tls-certs/ca-bundle.crt
      - contains:
          path: spec.template.spec.volumes
          content:
            name: codefresh-tls-certs
            secret:
              secretName: codefresh-tls-certs
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: codefresh-tls-certs
            mountPath: /app/config/codefresh-tls-certs
            readOnly: true

  - it: Argo Api Gateway should have CODEFRESH_SSL_CERT_PATH env var when .Values.global.codefresh.tls.caCerts.secretKeyRef is set
    template: argo-gateway/deployment.yaml
    values:
      - ./values/mandatory-values-ingress.yaml
    set:
      global:
        codefresh:
          tls:
            caCerts:
              secretKeyRef:
                name: my-codefresh-tls-certs
                key: my-ca-bundle.crt
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == 'CODEFRESH_SSL_CERT_PATH')].value
          value: /app/config/codefresh-tls-certs/my-ca-bundle.crt
      - contains:
          path: spec.template.spec.volumes
          content:
            name: codefresh-tls-certs
            secret:
              secretName: my-codefresh-tls-certs
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: codefresh-tls-certs
            mountPath: /app/config/codefresh-tls-certs
            readOnly: true
