{{- $acr := index .Values "argo-cd" "acrController" | default dict }}
{{- if $acr.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- with (mergeOverwrite (deepCopy (default (dict) .Values.global.statefulsetAnnotations)) $acr.statefulsetAnnotations) }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  name: {{ template "argo-cd.acr-controller.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "argo-cd.labels" (dict "context" . "component" $acr.name "name" $acr.name) | nindent 4 }}
spec:
  replicas: {{ $acr.replicas }}
  # TODO: Remove for breaking release as history limit cannot be patched
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      {{- include "argo-cd.selectorLabels" (dict "context" . "name" $acr.name) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "argo-cd.labels" (dict "context" . "component" $acr.name "name" $acr.name) | nindent 8 }}
        {{- with (mergeOverwrite (deepCopy (default (dict) .Values.global.podLabels)) $acr.podLabels) }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with $acr.imagePullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $acr.priorityClassName | default .Values.global.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if $acr.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ $acr.terminationGracePeriodSeconds }}
      {{- end }}
      serviceAccountName: {{ include "argo-cd.acrControllerServiceAccountName" . }}
      containers:
      - args:
        - /usr/local/bin/argocd-application-change-revision-controller
        {{- with $acr.extraArgs }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ default .Values.global.image.repository $acr.image.repository }}:{{ default (include "argo-cd.defaultTag" .) $acr.image.tag }}
        imagePullPolicy: {{ default .Values.global.image.imagePullPolicy $acr.image.imagePullPolicy }}
        name: {{ $acr.name }}
        env:
            {{- with (concat (default (list) .Values.global.env) (default (list) $acr.env)) }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            - name: ARGOCD_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: argocd-token
            - name: ARGOCD_APPLICATION_NAMESPACES
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: application.namespaces
                  optional: true
            - name: ACR_CONTROLLER_LOGFORMAT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: acr.log.format
                  optional: true
            - name: ACR_CONTROLLER_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: acr.log.level
                  optional: true
            - name: ACR_CONTROLLER_LISTEN_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: acr.listen.address
                  optional: true
            - name: ARGOCD_SERVER_ROOTPATH
              valueFrom:
                configMapKeyRef:
                  key: server.rootpath
                  name: argocd-cmd-params-cm
                  optional: true
        {{- with $acr.envFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
          - name: health
            containerPort: {{ $acr.containerPorts.health }}
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz?full=true
            port: health
          initialDelaySeconds: 3
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: {{ $acr.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ $acr.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ $acr.readinessProbe.timeoutSeconds }}
          successThreshold: {{ $acr.readinessProbe.successThreshold }}
          failureThreshold: {{ $acr.readinessProbe.failureThreshold }}
        resources:
          {{- toYaml $acr.resources | nindent 12 }}
        {{- with $acr.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- with $acr.extraContainers }}
        {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with $acr.initContainers }}
      initContainers:
        {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with include "argo-cd.affinity" (dict "context" . "component" $acr) }}
      affinity:
        {{- trim . | nindent 8 }}
      {{- end }}
      {{- with $acr.nodeSelector | default .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $acr.tolerations | default .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $acr.topologySpreadConstraints | default .Values.global.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range $constraint := . }}
      - {{ toYaml $constraint | nindent 8 | trim }}
          {{- if not $constraint.labelSelector }}
        labelSelector:
          matchLabels:
            {{- include "argo-cd.selectorLabels" (dict "context" $ "name" $acr.name) | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if $acr.hostNetwork }}
      hostNetwork: {{ $acr.hostNetwork }}
      {{- end }}
      {{- with $acr.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: {{ $acr.dnsPolicy }}
{{- end }}
