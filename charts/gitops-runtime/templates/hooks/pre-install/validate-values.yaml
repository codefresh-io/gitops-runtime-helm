{{- if  not .Values.installer.skipValidation }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: validate-values-config
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation,hook-failed
    helm.sh/hook-weight: "-10"
data:
  values.yaml: |
{{ .Values | toYaml | indent 4 }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: validate-values
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccount: validate-values-sa
      restartPolicy: Never
      containers:
      - name: validate-values
        image: "{{ .Values.installer.image.repository }}:{{ .Values.installer.image.tag | default .Chart.Version }}"
        imagePullPolicy: {{ .Values.installer.image.pullPolicy }}
        env:
        - name: ARGOCD_LABELS
          value: "{{ range $k, $v := .Values.installer.argoCdVersionCheck.argoServerLabels }}{{ $k }}={{ $v }},{{ end }}"
        - name: ARGOCD_VERSION_PATH
          value: {{ .Values.installer.argoCdVersionCheck.versionPath | default "/api/version" }}
        - name: ARGOCD_SCHEME
          value: {{ .Values.installer.argoCdVersionCheck.scheme | default "http" }}
        - name: ARGOCD_INSECURE
          value: {{ .Values.installer.argoCdVersionCheck.insecureSkipVerify | default false | quote }}
        - name: REQUIRED_VERSION_CONSTRAINT
          value: ">=2.12 <3"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CHART_VERSION
          value: {{ .Chart.Version }}
        command: ["sh", "-c"]
        args:
        - | # shell
          # --- Service Discovery and Version Fetching ---
          # (This part remains the same as the previous version)
          CLEAN_LABELS=$(echo "$ARGOCD_LABELS" | sed 's/,$//')
          echo "Searching for Argo CD service in namespace '$NAMESPACE' with labels '$CLEAN_LABELS'"
          SERVICE_INFO=$(kubectl get svc -n "$NAMESPACE" -l "$CLEAN_LABELS" -o json)
          SERVICE_COUNT=$(echo "$SERVICE_INFO" | jq '.items | length')

          if [ "$SERVICE_COUNT" -eq 0 ]; then
            echo "Error: No Argo CD service found matching labels '$CLEAN_LABELS' in namespace '$NAMESPACE'."
            exit 1
          elif [ "$SERVICE_COUNT" -gt 1 ]; then
            echo "Warning: Found multiple services matching labels '$CLEAN_LABELS'. Using the first one found."
          fi

          SERVICE_NAME=$(echo "$SERVICE_INFO" | jq -r '.items[0].metadata.name')
          SERVICE_PORT=$(echo "$SERVICE_INFO" | jq -r '.items[0].spec.ports[0].port')

          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" = "null" ] || [ -z "$SERVICE_PORT" ] || [ "$SERVICE_PORT" = "null" ]; then
            echo "Error: Could not extract service name or port from the found service."
            exit 1
          fi

          echo "Found Argo CD service '$SERVICE_NAME' on port '$SERVICE_PORT'"
          TARGET_URL="${ARGOCD_SCHEME}://${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local:${SERVICE_PORT}${ARGOCD_VERSION_PATH}"
          echo "Checking Argo CD version via API: $TARGET_URL"

          CURL_OPTS="-sS --fail --connect-timeout 10"
          if [ "$ARGOCD_SCHEME" = "https" ] && [ "$ARGOCD_INSECURE" = "true" ]; then
            CURL_OPTS="$CURL_OPTS -k"
          fi

          VERSION_JSON=$(curl $CURL_OPTS "$TARGET_URL")
          CURL_EXIT_CODE=$?

          if [ $CURL_EXIT_CODE -ne 0 ]; then
            echo "Error: Failed to connect to Argo CD API at $TARGET_URL (curl exit code: $CURL_EXIT_CODE)."
            exit 1
          fi

          VERSION_STRING=$(echo "$VERSION_JSON" | jq -r '.Version')

          if [ -z "$VERSION_STRING" ] || [ "$VERSION_STRING" = "null" ]; then
            echo "Error: Could not parse '.Version' field from API response using jq."
            echo "Response JSON: $VERSION_JSON"
            exit 1
          fi

          # Clean potential 'v' prefix for semver tool
          CLEAN_VERSION_STRING=${VERSION_STRING#v}

          echo "Found Argo CD version string: $VERSION_STRING (using $CLEAN_VERSION_STRING for check)"
          echo "Required version constraint: $REQUIRED_VERSION_CONSTRAINT"

          # --- Semver Check (using semver CLI) ---
          echo "Performing semver check using 'semver' CLI..."
          # The semver command will exit non-zero if the version doesn't satisfy the range.
          # 'set -e' will cause the script to exit immediately if semver fails.
          if semver "$CLEAN_VERSION_STRING" --range "$REQUIRED_VERSION_CONSTRAINT"; then
            echo "Argo CD version $VERSION_STRING satisfies range '$REQUIRED_VERSION_CONSTRAINT'."
          else
            echo "Error: Argo CD version $VERSION_STRING does not satisfy required range '$REQUIRED_VERSION_CONSTRAINT'."
            exit 1 # Explicitly exit 1 for clarity, though 'set -e' would handle it
          fi

          # --- Helm Values Validation (cf cli) ---
          # This part only runs if the semver check passes
          echo "Argo CD version check passed. Validating helm values using cf cli..."
          cf helm validate --values /job_tmp/values.yaml --namespace ${NAMESPACE} --version ${CHART_VERSION} --hook --log-level debug
        volumeMounts:
        - name: customized-values
          mountPath: "/job_tmp"
      volumes:
      - name: customized-values
        configMap:
          name: validate-values-config  
{{- end }}
