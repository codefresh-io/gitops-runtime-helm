{{- define "cf-argocd-extras.event-reporter.statefulset" }}

{{- $context := deepCopy . }}

{{- $defaultVals := include "cf-argocd-extras.default-values" . | fromYaml }}
{{- $vals := mergeOverwrite $defaultVals (get .Values "cf-argocd-extras") }}

{{- $_ := set $context "Values" $vals.eventReporter }}
{{- $_ := set $context.Values "global" (deepCopy (get .Values "global")) }}

{{- $_ := set $context.Values.podAnnotations "checksum/config" (include (print $.Template.BasePath "/cf-argocd-extras/event-reporter/configmap.yaml") . | sha256sum) }}

{{- if $vals.externalRedis.enabled }}
  {{- $_ := set $context.Values.container.env.REDIS_PASSWORD.valueFrom.secretKeyRef "name" (default "argocd-redis" $vals.externalRedis.existingSecretKeyRef.name) }}
  {{- $_ := set $context.Values.container.env.REDIS_PASSWORD.valueFrom.secretKeyRef "key"  (default "redis-password" $vals.externalRedis.existingSecretKeyRef.key) }}
{{- end }}

{{- $argoCdAuth := (index .Values "global" "external-argo-cd" "auth") }}
{{- if (eq $argoCdAuth.type "token") }}
  {{- if $argoCdAuth.token }}
    {{- $_ := set $context.Values.container.env "ARGO_CD_TOKEN_SECRET_NAME" "gitops-runtime-argo-cd-token" }}
    {{- $_ := set $context.Values.container.env "ARGO_CD_TOKEN_SECRET_KEY" "token" }}
  {{- else if $argoCdAuth.tokenSecretKeyRef }}
    {{- $_ := set $context.Values.container.env "ARGO_CD_TOKEN_SECRET_NAME" (required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.auth.tokenSecretKeyRef.name is required" $argoCdAuth.tokenSecretKeyRef.name) }}
    {{- $_ := set $context.Values.container.env "ARGO_CD_TOKEN_SECRET_KEY" (required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.auth.tokenSecretKeyRef.key is required" $argoCdAuth.tokenSecretKeyRef.key) }}
  {{- else }}
    {{ fail ".Values.global.external-argo-cd.auth.type is 'token' and .Values.global.external-argo-cd.auth.token or .Values.global.external-argo-cd.auth.tokenSecretKeyRef are not set" }}
  {{- end }}
{{- end }}

{{- if and (index $context.Values "global" "external-argo-cd" "server" "rootpath") }}
  {{- $_ := set $context.Values.container.env "ARGOCD_SERVER_ROOTPATH" (index $context.Values "global" "external-argo-cd" "server" "rootpath") }}
{{- end }}

{{- if or $context.Values.global.codefresh.tls.caCerts.secret.create $context.Values.global.codefresh.tls.caCerts.secretKeyRef }}
  {{- $secretName := $context.Values.global.codefresh.tls.caCerts.secretKeyRef.name | default "codefresh-tls-certs" }}
  {{- $secretKey := $context.Values.global.codefresh.tls.caCerts.secret.create | ternary (default "ca-bundle.crt" $context.Values.global.codefresh.tls.caCerts.secret.key) $context.Values.global.codefresh.tls.caCerts.secretKeyRef.key }}
  {{- $_ := set $context.Values.container.env "CODEFRESH_SSL_CERT_PATH" (printf "/app/config/codefresh-tls-certs/%s" $secretKey ) }}
  {{- $_ := set (index $context.Values.volumes "codefresh-tls-certs") "nameOverride" $secretName }}
{{- end }}

{{/* Workaround to NOT change label selectors from previous runtime release when event-reporter was part of cf-argocd-extras Subchart */}}
{{- $_ := set $context.Values "nameOverride" "cf-argocd-extras" }}

{{- $templateName := printf "cf-common-%s.controller" (index .Subcharts "cf-common").Chart.Version -}}
{{- include $templateName $context -}}

{{- end }}
