{{- if and (index .Values "gitops-operator" "enabled") }}

{{- if index (get .Values "gitops-operator") "libraryMode" }}
  {{- $gitopsOperatorContext := (deepCopy (index .Subcharts "gitops-operator"))}}

  {{- if and (not (index .Values "argo-cd" "enabled")) }}

    {{- if and (eq (index .Values "global" "external-argo-cd" "auth" "type") "token") }}

      {{- if not (index .Values "global" "external-argo-cd" "auth" "token") }}
        {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_TOKEN_SECRET_NAME" (required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.auth.tokenSecretKeyRef.name is required" (index .Values "global" "external-argo-cd" "auth" "tokenSecretKeyRef" "name")) }}
        {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_TOKEN_SECRET_KEY" (required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.auth.tokenSecretKeyRef.key is required" (index .Values "global" "external-argo-cd" "auth" "tokenSecretKeyRef" "key")) }}
      {{- else }}
        {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_TOKEN_SECRET_NAME" "gitops-runtime-argo-cd-token" }}
        {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_TOKEN_SECRET_KEY" "token" }}
      {{- end }}

    {{- end }}
  {{- end }}

  {{/* Set argo-cd-server service and port */}}
  {{ if not (index .Values "gitops-operator").env.ARGO_CD_URL }}
    {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_URL" (include "codefresh-gitops-runtime.argocd.server.no-protocol-url" . ) }}
  {{- end }}

  {{/* Set workflows url */}}
  {{- if index .Values "argo-workflows" "enabled" }}
    {{- if not $gitopsOperatorContext.Values.env.ARGO_WF_URL }}
      {{- $argoWorkflowsUrl := include "codefresh-gitops-runtime.argo-workflows.server.url" . }}
      {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_WF_URL" $argoWorkflowsUrl }}
    {{- end }}
  {{- end}}

  {{/* Set certificates */}}
  {{- if or .Values.global.codefresh.tls.caCerts.secret.create .Values.global.codefresh.tls.caCerts.secretKeyRef}}
    {{- $_ := set $gitopsOperatorContext.Values.global.codefresh.tls.caCerts.secretKeyRef "name" (.Values.global.codefresh.tls.caCerts.secret.create | ternary "codefresh-tls-certs" .Values.global.codefresh.tls.caCerts.secretKeyRef.name) }}
    {{- $_ := set $gitopsOperatorContext.Values.global.codefresh.tls.caCerts.secretKeyRef "key" (.Values.global.codefresh.tls.caCerts.secret.create | ternary (default "ca-bundle.crt" .Values.global.codefresh.tls.caCerts.secret.key) .Values.global.codefresh.tls.caCerts.secretKeyRef.key) }}
  {{- end }}

  {{- if and (gt (int $gitopsOperatorContext.Values.replicaCount) 1 ) }}
    {{- $_ := set $gitopsOperatorContext.Values.env "LEADER_ELECT" "true" }}
  {{- else }}
    {{- $_ := set $gitopsOperatorContext.Values.env "LEADER_ELECT" "false" }}
  {{- end }}

  {{- include "gitops-operator.resources" $gitopsOperatorContext}}

{{- end }}

{{- end }}
