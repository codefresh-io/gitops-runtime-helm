{{- if and (index .Values "gitops-operator" "enabled") }}

{{- if index (get .Values "gitops-operator") "libraryMode" }}
  {{- $gitopsOperatorContext := (index .Subcharts "gitops-operator")}}

  {{- if and (index .Subcharts "argo-cd") }}
  
    {{- $argoCDImageDict := index .Subcharts "argo-cd" "Values" "global" "image" }}
    {{- if not $argoCDImageDict.tag }}
      {{- $_ := set $argoCDImageDict "tag" (get .Subcharts "argo-cd").Chart.AppVersion }}
    {{- end }}

    {{/* Set ArgoCD image */}}
    {{- if not (index .Values "gitops-operator" "argoCdNotifications" "imageOverride") }}
      {{- $_ := set $gitopsOperatorContext.Values.argoCdNotifications.image "repository" $argoCDImageDict.repository }}
      {{- $_ := set $gitopsOperatorContext.Values.argoCdNotifications.image "tag" $argoCDImageDict.tag }}
    {{- end }}

  {{- else if and (index .Values "global" "external-argo-cd" "server" "image") }}
    
    {{ $argoCDImageDict := (index .Values "global" "external-argo-cd" "server" "image") }}

    {{/* Set ArgoCD image */}}
    {{- if not (index .Values "gitops-operator" "argoCdNotifications" "imageOverride") }}
      {{- $_ := set $gitopsOperatorContext.Values.argoCdNotifications.image "repository" (required "ArgoCD is not enabled and .Values.global.external-argo-cd.server.image is not set" $argoCDImageDict.repository) }}
      {{- $_ := set $gitopsOperatorContext.Values.argoCdNotifications.image "tag" (required "ArgoCD is not enabled  .Values.global.external-argo-cd.server.tag is not set" $argoCDImageDict.tag) }}
    {{- end }}

  {{- else }}
      {{- fail "ArgoCD is not enabled and .Values.global.external-argo-cd.server.image is not set"  }}
  {{- end }}

  {{- if and (not (index .Values "argo-cd" "enabled")) }}
    
    {{- if and (index .Values "global" "external-argo-cd" "tokenSecretKeyRef") (eq (index .Values "global" "external-argo-cd" "auth" "type") "token") }}
      
      {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_TOKEN_SECRET_NAME" (required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.tokenSecretKeyRef.name is required" (index .Values "global" "external-argo-cd" "tokenSecretKeyRef" "name")) }}
      {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_TOKEN_SECRET_KEY" (required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore .Values.global.external-argo-cd.tokenSecretKeyRef.key is required" (index .Values "global" "external-argo-cd" "tokenSecretKeyRef" "key")) }}
    
    {{- end }}
  {{- end }}

  {{/* Set repo server service and port */}}
  {{- $_ := set $gitopsOperatorContext.Values.argoCdNotifications.argocd.repoServer "fullname" (include "codefresh-gitops-runtime.argocd.reposerver.servicename" . ) }}
  {{- $_ := set $gitopsOperatorContext.Values.argoCdNotifications.argocd.repoServer "port" (include "codefresh-gitops-runtime.argocd.reposerver.serviceport" . ) }}

  {{/* Set argo-cd-server service and port */}}
  {{ if not (index .Values "gitops-operator").env.ARGO_CD_URL }}
    {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_CD_URL" (include "codefresh-gitops-runtime.argocd.server.no-protocol-url" . ) }}
  {{- end }}

  {{/* Set workflows url */}}
  {{- if index .Values "argo-workflows" "enabled" }}
    {{- if not $gitopsOperatorContext.Values.env.ARGO_WF_URL }}
      {{- $argoWorkflowsUrl := include "codefresh-gitops-runtime.argo-workflows.server.url" . }}
      {{- $_ := set $gitopsOperatorContext.Values.env "ARGO_WF_URL" $argoWorkflowsUrl }}
    {{- end }}
  {{- end}}

  {{/* Set certificates */}}
  {{- if or .Values.global.codefresh.tls.caCerts.secret.create .Values.global.codefresh.tls.caCerts.secretKeyRef}}
    {{- $_ := set $gitopsOperatorContext.Values.global.codefresh.tls.caCerts.secretKeyRef "name" (.Values.global.codefresh.tls.caCerts.secret.create | ternary "codefresh-tls-certs" .Values.global.codefresh.tls.caCerts.secretKeyRef.name) }}
    {{- $_ := set $gitopsOperatorContext.Values.global.codefresh.tls.caCerts.secretKeyRef "key" (.Values.global.codefresh.tls.caCerts.secret.create | ternary (default "ca-bundle.crt" .Values.global.codefresh.tls.caCerts.secret.key) .Values.global.codefresh.tls.caCerts.secretKeyRef.key) }}
  {{- end }}

  {{- include "gitops-operator.resources" $gitopsOperatorContext}}

{{- end }}

{{- end }}
