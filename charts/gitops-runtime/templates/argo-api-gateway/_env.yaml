{{- define "argo-api-gateway.resources.environment-variables.calculated" }}
HTTP_PROXY: {{ .Values.global.httpProxy | squote}}
HTTPS_PROXY: {{ .Values.global.httpsProxy | squote }}
NO_PROXY: {{ .Values.global.noProxy | squote }}

{{- if and (eq (index .Values "global" "external-argo-cd" "auth" "type") "token") }}
  {{- if not (index .Values "global" "external-argo-cd" "auth" "token") }}
ARGO_CD_TOKEN_SECRET_NAME: {{ required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore Values.global.external-argo-cd.auth.tokenSecretKeyRef.name is required" (index .Values "global" "external-argo-cd" "auth" "tokenSecretKeyRef" "name") }}
ARGO_CD_TOKEN_SECRET_KEY: {{ required ".Values.global.external-argo-cd.auth.type is set to 'token' therefore Values.global.external-argo-cd.auth.tokenSecretKeyRef.key is required" (index .Values "global" "external-argo-cd" "auth" "tokenSecretKeyRef" "key" ) }}
  {{- else }}
ARGO_CD_TOKEN_SECRET_NAME: "gitops-runtime-argo-cd-token"
ARGO_CD_TOKEN_SECRET_KEY: "token"
  {{- end }}
{{- end }}

{{- if and (index .Values "global" "external-argo-cd" "server" "rootpath") }}
ARGOCD_SERVER_ROOTPATH: {{ index .Values "global" "external-argo-cd" "server" "rootpath" }}
{{- end }}

{{- if or .Values.global.codefresh.tls.caCerts.secret.create (and .Values.global.codefresh.tls.caCerts.secretKeyRef.key .Values.global.codefresh.tls.caCerts.secretKeyRef.name) }}
  {{- $secretKey := .Values.global.codefresh.tls.caCerts.secret.create | ternary (default "ca-bundle.crt" .Values.global.codefresh.tls.caCerts.secret.key) .Values.global.codefresh.tls.caCerts.secretKeyRef.key }}
CODEFRESH_SSL_CERT_PATH: {{ printf "/app/config/codefresh-tls-certs/%s" $secretKey }}
{{- end }}

{{- end }}

{{- define "argo-api-gateway.resources.environment-variables.defaults" -}}
ARGOCD_SERVER:
  valueFrom:
    configMapKeyRef:
      name: argo-api-gateway-cmd-params-cm
      key: argocd.server
ARGO_CD_TOKEN_SECRET_NAME: argocd-token
ARGO_CD_TOKEN_SECRET_KEY: token
ARGOCD_SERVER_ROOTPATH:
  valueFrom:
    configMapKeyRef:
      name: argocd-cmd-params-cm
      key: server.rootpath
      optional: true
BINARY_NAME: sources-server
CODEFRESH_SSL_CERT_PATH: ""
CODEFRESH_TLS_INSECURE:
  valueFrom:
    configMapKeyRef:
      name: argocd-cmd-params-cm
      key: codefresh.tls.insecure
      optional: true
CODEFRESH_TOKEN:
  valueFrom:
    secretKeyRef:
      key: token
      name: codefresh-token
CODEFRESH_URL:
  valueFrom:
    configMapKeyRef:
      key: base-url
      name: codefresh-cm
LISTEN_ADDRESS:
  valueFrom:
    configMapKeyRef:
      name: argo-api-gateway-cmd-params-cm
      key: server.listen.address
      optional: true
REDISDB:
  valueFrom:
    configMapKeyRef:
      name: argocd-cmd-params-cm
      key: redis.db
      optional: true
REDIS_COMPRESSION:
  valueFrom:
    configMapKeyRef:
      name: argocd-cmd-params-cm
      key: redis.compression
      optional: true
REDIS_PASSWORD:
  valueFrom:
    secretKeyRef:
      name: argocd-redis
      key: auth
REDIS_SERVER:
  valueFrom:
    configMapKeyRef:
      name: argocd-cmd-params-cm
      key: redis.server
REDIS_USERNAME:
  valueFrom:
    secretKeyRef:
      name: argocd-redis
      key: redis-username
      optional: true
REPO_SERVER:
  valueFrom:
    configMapKeyRef:
      name: argo-api-gateway-cmd-params-cm
      key: repo.server
REPO_SERVER_TIMEOUT_SECONDS:
  valueFrom:
    configMapKeyRef:
      name: argo-api-gateway-cmd-params-cm
      key: repo.server.timeout.seconds
      optional: true
{{- end -}}
