[
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\nquery productReleaseTasks {\n\tproductReleaseTasks {\n\t\ttype\n\t\tlabels\n\t\tcommitInfo {\n\t\t\tsha\n\t\t\tcommitter\n\t\t\tdate\n\t\t\tmessage\n\t\t}\n\t\tappNamespace\n\t\tappName\n\t\trepoUrl\n\t\tbranch\n\t\tpath\n\t\tpostActionOnly\n\t\tpreAction\n\t\tactionUrl\n\t\tactionBody\n\t\tpostAction\n\t\tworkflowNamespace\n\t\tworkflowName\n\t}\n}",
                "variables": {}
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "productReleaseTasks": [
                        {
                            "type": "CreateProductReleaseTask",
                            "labels": {
                                "codefresh.io/product": "simple",
                                "codefresh.io/env": "prod",
                                "codefresh.io/release": "682051c15f0ea1658a3eed78",
                                "codefresh.io/promotion-flow": "",
                                "codefresh.io/app-name": "simple-prod",
                                "codefresh.io/app-namespace": "codefresh",
                                "codefresh.io/release-name": "3ab912d13"
                            },
                            "commitInfo": null,
                            "appNamespace": "codefresh",
                            "appName": "simple-prod",
                            "repoUrl": "http://gitea-http.gitea:3000/test-owner/simple-app.git",
                            "branch": "HEAD",
                            "path": ".",
                            "postActionOnly": false,
                            "preAction": null,
                            "actionUrl": "/api/graphql",
                            "actionBody": "{\"query\":\"\\n  mutation commitFiles($args: CommitFilesArgs!) {\\n    commitFiles(args: $args) {\\n      COMMIT_SHA: sha\\n      sha\\n      message\\n      date\\n      committer {\\n        name\\n        email\\n      }\\n    }\\n  }\\n\",\"variables\":{\"args\":{\"msg\":\"promote codefresh/simple-dev to codefresh/simple-prod\",\"description\":\"\",\"files\":[{\"path\":\"values.yaml\",\"revision\":\"f238c105280eaf3a045d261f2caa1e423d8b4473\",\"data\":\"# Default values for simple-app.\\n# This is a YAML-formatted file.\\n# Declare variables to be passed into your templates.\\n\\nreplicaCount: 1\\n\\nimage:\\n  repository: wang/alpine-go-echo-server\\n  # sed -i -e \\\"s/^\\\\(  tag:\\\\).*/\\\\1 $CI_COMMIT_SHA/\\\" ops/values.yaml\\n  tag: 0.1\\n  pullPolicy: IfNotPresent\\n\\nimagePullSecrets: []\\nnameOverride: \\\"\\\"\\nfullnameOverride: \\\"\\\"\\ncomponents:\\n  - test1\\napp:\\n  name: my-app-name\\n  command:\\n    - \\\"/app/echo-server\\\"\\n  port: 3000\\n  ## Enabled 'ports' If additional ports are needed\\n  # ports:\\n  #   - name: port2\\n  #     containerPort: 3002\\n  #     protocol: TCP\\n  #   - name: port3\\n  #     containerPort: 3003\\n  #     protocol: UDP\\n  config:\\n    test_env: \\\"This is test value\\\"\\n  secrets: false # To enable secretRef, you need create a secret named as RELEASE-NAME-secrets\\n  # livenessProbe:\\n  #   httpGet:\\n  #     path: /\\n  #     port: http\\n  # readinessProbe:\\n  #   httpGet:\\n  #     path: /\\n  #     port: http\\n  volumeMounts: []\\n  # - name: demo-data\\n  #   mountPath: /mnt/data\\n  #   readonly: true\\n\\nsidecar:\\n  name: my-app-name-sidecar\\n  enabled: false\\n  image:\\n    tag: 0.1\\n    repository: wang/alpine-go-echo-server\\n    pullPolicy: IfNotPresent\\n  port: 3001\\n  command:\\n    - \\\"/app/echo-server\\\"\\n  volumeMounts: []\\n  resources:\\n    limits:\\n      cpu: 100m\\n      memory: 128Mi\\n\\n\\nvolumes: []\\n  # - name: demo-data\\n  #   secret:\\n  #     secretName: demo-secrets\\n\\nserviceAccount:\\n  # Specifies whether a service account should be created\\n  create: true\\n  # Annotations to add to the service account\\n  annotations: {}\\n  # The name of the service account to use.\\n  # If not set and create is true, a name is generated using the fullname template\\n  name:\\n\\npodSecurityContext: {}\\n  # fsGroup: 2000\\n\\nsecurityContext: {}\\n  # capabilities:\\n  #   drop:\\n  #   - ALL\\n  # readOnlyRootFilesystem: true\\n  # runAsNonRoot: true\\n  # runAsUser: 1000\\n\\nservice:\\n  enabled: true\\n  type: ClusterIP\\n  port: 80\\n  ## Enable 'ports', if additional ports are needed\\n  # ports:\\n  #   - name: port2\\n  #     port: 3002\\n  #     targetPort: port2\\n  #     protocol: TCP\\n  #   - name: port3\\n  #     port: 3003\\n  #     targetPort: port3\\n  #     protocol: UDP\\n\\ningress:\\n  enabled: false\\n  annotations: {}\\n    # kubernetes.io/ingress.class: nginx\\n    # kubernetes.io/tls-acme: \\\"true\\\"\\n    # cert-manager.io/cluster-issuer: letsencrypt-production\\n  hosts:\\n    - host: chart-example.local\\n      paths: []\\n      #  - /\\n      #  - /index.html\\n  tls: []\\n  #  - secretName: chart-example-tls\\n  #    hosts:\\n  #      - chart-example.local\\n\\nresources: {}\\n  # We usually recommend not to specify default resources and to leave this as a conscious\\n  # choice for the user. This also increases chances charts run on environments with little\\n  # resources, such as Minikube. If you do want to specify resources, uncomment the following\\n  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.\\n  # limits:\\n  #   cpu: 100m\\n  #   memory: 128Mi\\n  # requests:\\n  #   cpu: 100m\\n  #   memory: 128Mi\\n\\nnodeSelector: {}\\n\\ntolerations: []\\n\\naffinity: {}\\n\"}],\"repo\":\"test-owner/simple-app\",\"branchName\":\"HEAD\",\"force\":true}}}",
                            "postAction": null,
                            "workflowNamespace": null,
                            "workflowName": null
                        }
                    ]
                }
            }
        },
        "times": {
            "remainingTimes": 1,
            "unlimited": false
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\nquery productReleaseRunHooksTasks {\n\tproductReleaseRunHooksTasks {\n\t\ttype\n\t\tlabels\n\t\tworkflowTemplateName\n\t\tworkflowNamespace\n\t\tworkflowName\n\t\tparameters\n\t}\n}",
                "variables": {}
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "productReleaseRunHooksTasks": []
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\nquery productReleaseCommitStatuses {\n\tproductReleaseCommitStatuses {\n\t\tsha\n\t\trepoURL\n\t\tstatus\n\t\tdescription\n\t\tcontext\n\t\ttargetUrl\n\t}\n}",
                "variables": {}
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "productReleaseCommitStatuses": []
                }
            }
        }
    }
]
