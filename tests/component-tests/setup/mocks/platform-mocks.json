[
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\n  mutation CreateRuntime($installationArgs: RuntimeInstallationArgs!) {\n    createRuntime(installationArgs: $installationArgs) {\n      newAccessToken\n    }\n  }\n",
                "variables": {
                    "installationArgs": {
                        "runtimeName": "test-runtime",
                        "runtimeNamespace": "codefresh",
                        "componentNames": [],
                        "isExternalArgoCd": false,
                        "chartVersion": "0.19.0",
                        "cluster": "https://kubernetes.default.svc",
                        "ingressClass": "nginx",
                        "ingressController": "nginx",
                        "ingressHost": "http://host.docker.internal:8080",
                        "installationType": "HELM",
                        "managed": false,
                        "runtimeVersion": "0.1.71"
                    }
                }
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "createRuntime": {
                        "newAccessToken": "aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbb"
                    }
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "type": "REGEX",
                "regex": "\\{\\s*\"query\"\\s*:\\s*\".*saveSealingKey.*\",\\s*\"variables\"\\s*:\\s*\\{\\s*\"privateKey\"\\s*:\\s*\".*\"\\s*\\}\\s*\\}"
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "saveSealingKey": "68161a545a284d2ec56e9d1a"
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\n  query {\n    productComponentsList(filters: { hasPendingPullRequests: true }) {\n      id\n      pendingPullRequests {\n        repo\n        id\n      }\n    }\n  }\n"
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "productComponentsList": []
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\n  query Applications($pagination: SlicePaginationArgs!, $filters: ApplicationsFilterArgs) {\n    response: applications(pagination: $pagination, filters: $filters) {\n      edges {\n        node {\n          metadata {\n            name\n            namespace\n            runtime\n            account\n          }\n        }\n      }\n    }\n  }\n",
                "variables": {
                    "filters": {
                        "inactive": true,
                        "includeComponents": true
                    },
                    "pagination": {
                        "first": 50
                    }
                }
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "response": {
                        "edges": [],
                        "pageInfo": {
                            "startCursor": null,
                            "endCursor": null,
                            "hasNextPage": false,
                            "hasPrevPage": false
                        }
                    }
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "type": "JSON_SCHEMA",
                "jsonSchema": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "pattern": "query getSealingKey\\(\\$id: String!\\) \\{[\\s\\S]*getSealingKey"
                        },
                        "variables": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id"
                            ]
                        }
                    },
                    "required": [
                        "query",
                        "variables"
                    ]
                }
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "getSealingKey": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBb3dYZTFUaldIR1dQQS9zV3FnSmVJSDc5VytBbEdENWJUNkoxanZOVGoyenRSZ2pXClVTeTdZMDNSRGdjZkdNQlRQUzBDdWkxNWlSTUhCNjR3UzNZTEk1eEllOENOY0l2K0taK2RsZ1kyWEE3SVJwREIKZVFabGNwaTdjamcvSEZDbnZiWW5tb0Nja0hJdEpnZHd0Nkl5OFA2Qm0yMVVNUjVXR1VzOXlhTDU5Y28zMVFuTApUeVh5Y1BWOTI0QTdLZkVzdEo4R3F2S0VtUVZFdnFIdFcyeEtkOXNTUDg5ZXpvK3g2WExKaGFVZ002U1JtMzczCndVcjh5d21kOTlrQ0lJVXRjVmRPOTdSZHkzRkpPeUswVmQzb0lMNWZVaXZkV2pQTnFjQjFxSUdCQ3VnbkVFS1IKdTE3TUx2bEtRRkQwKzZ6VGJUSG9iL0pZN0NzMXVXUlBFZGNtOWhWc2lCQTYwN2FIejlCOEtyUnhKT041c2NkZAorc0lnRVlBWjIxZllkVjArVnhYQm9xa3hwYWd1bHExMTd5ZWl5K2FNcmh3VkRyWkx2Tjh0YmtyaitVemhIcThTCjNaYWROdWE4MkRQdzFvSzhnMThPRGVWbVIzcUtuT3hmaUtJWm1kNXhGRzJiUFdCUWtkbUExdkphZGtWdnh5U0YKakJyM1NVREIzNjZ6TERHOElSbzQrWkM5c2dSanlaL2FqTTNkaWhEOFFkU1pBai9oRmZ5Q3FkRjZYWCt3Yk1PRgpDOWhQZDZVa2pFSEZNRHBkNm5MRi9GTENaY2xZSEg3WTMxK3ZsUEE5c3l3eGpLTDlyRmNielhVV3c2RTdnMmN3Cnh4cnpXYkRkT0xtMUpLRjY5NU5EcllNQS8zMjlaVmJOMDZXV0JwTHhkbVlHRU9OWllkRHhWVVJKelVNQ0F3RUEKQVFLQ0FnQW16MVQzU2VxZkpBWmlHanFSQ3JOQjVUbUh6OXJFNU1OME4rYm91MERmV2owNmVRd2NreHVoVG50QQpiYTJYaE9ITUpKVUxvWnZYYURJNlA5dTdlMFMzbTVNZDh2ODVGZnJTQ2UvSU1YNXJlQkZ4eXpCa0VZUEJQbDhSCm1CWmVOVTFadXEyKytITk5hQUVibHBYZEFiNUM1VFFSdm50V25qUTlIVTUrWEZCSmxYU3BRUVdudUE3NW1WZjMKRTVZQ0xDcEtiYmwycFBtd1BETGJkMDA4Z0pGUjYxTnk0WGxlajVMNVVweHJOcDV0N1BYRklQcjJoMVdiT0pUawoxa0xOWHljc1htNnNSY0kybHFlcWJsNmtPb255a1orN3ZqbWFLYzhDWkpFZUpvYUVCRFNZaUdDTlRNb3JQS25TCm1mTllueEpPWXAxRldWcVdEc3RoY1dIcGkyRDR2MkdYaTQ0UnZ2UE1kME9EVDdrVFlFWFc0YlFsQURlVkZjUDIKcjcrOGJDWWZFd0dReG9xRVpsbjdnb0ZsbGd5RVl0RmcyMGRSR2pKVzFxVDI4b21CU0UvMHI4d3lvaGxJQ25XVgowWVJrS01ld1M1VjdXUndnVzNjL3pOa0M5c082VlhZSm82UmRVUWgyVFpDRHROcUZOUmk5ZHIvTnNFcG0zb0ZmCkJUNVRUSW5YQWM5RTJXOVBFUEVic2Z5Y3BacThJcFNuSnNKck9qbW9taTBmalBoMDBvbFYvVVVXdWZ5UDBibzkKcEh3L2tMR3JrOGFzNmlIdE5ITyt6eTl0TEhtcWhKbFY1aEU0azJjNUs0Q1Nqbnh4WlBZTFVkTldMV1NvM2NSbwovMmtvVUhacjRhVWhmVmMxTXFrY2pNZ1RUeEhNNnFxTGRDQXF1dGNqOU1pemJVV0pZUUtDQVFFQTBRQVExMVJvCm1qUGlaZjU5VG1oWHJrOWduSkJGWjJpMk1JdXlBVitFZHc5SFJWRVR6ZjY2S0hHZDFudzJjTGYxaWVVOXRrRzAKeHRHdlFGc1Y1SXRaVzhOMDhjemRQTXNEd0tGNmN1bFJBemhFU2ZxQ3BLek5xaDQ0MFNGaWlqSURYR0hxMTJ6bwplRGNhZjVkL0ZmS1daMUx4c1JFMlhRMFl3Lyt1U1"
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\n  query GitSources($pagination: SlicePaginationArgs, $project: String, $runtime: String) {\n    response: gitSources(pagination: $pagination, project: $project, runtime: $runtime) {\n      edges {\n        node {\n          metadata {\n            account\n            runtime\n            group\n            version\n            kind\n            name\n            namespace\n          }\n          self {\n            repoURL\n            path\n            revision\n          }\n          permissions {\n            userId\n            read\n            write\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPrevPage\n      }\n    }\n  }\n",
                "variables": {
                    "runtime": "test-runtime"
                }
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "response": {
                        "edges": [],
                        "pageInfo": {
                            "startCursor": null,
                            "endCursor": null,
                            "hasNextPage": false,
                            "hasPrevPage": false
                        }
                    }
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\n  query me {\n    me {\n      runtimeName\n      activeAccount {\n        id\n        name\n        gitProvider\n        gitApiUrl\n        sharedConfigRepo\n      }\n    }\n  }\n"
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "me": {
                        "runtimeName": "test-runtime",
                        "activeAccount": {
                            "id": "6791f6184c56bd51c65784a2",
                            "name": "local",
                            "gitProvider": "GITHUB",
                            "gitApiUrl": "http://mockserver.mockserver:1080",
                            "sharedConfigRepo": "http://gitea-http.gitea:3000/test-owner/codefresh-isc"
                        }
                    }
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\n  query Runtime($name: String!) {\n    runtime(name: $name) {\n      metadata {\n        account\n        namespace\n      }\n      installationStatus\n      installationType\n      ingressHost\n      runtimeVersion\n    }\n  }\n",
                "variables": {
                    "name": "test-runtime"
                }
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "runtime": {
                        "metadata": {
                            "account": "6791f6184c56bd51c65784a2",
                            "namespace": "codefresh"
                        },
                        "installationStatus": "IN_PROGRESS",
                        "installationType": "HELM",
                        "ingressHost": "http://host.docker.internal:8080",
                        "runtimeVersion": "0.1.71"
                    }
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "type": "REGEX",
                "regex": "\\{\\s*\"query\"\\s*:\\s*\".*shouldBeImplicitConfigurationRuntime.*\"\\s*\\}"
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "shouldBeImplicitConfigurationRuntime": false
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "type": "REGEX",
                "regex": "\\{\\s*\"query\"\\s*:\\s*\".*updateRuntimeClusters.*\",\\s*\"variables\"\\s*:\\s*\\{\\s*\"clusters\"\\s*:\\s*\\[.*\\]\\s*\\}\\s*\\}"
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "runtime": {
                        "metadata": {
                            "account": "6791f6184c56bd51c65784a2",
                            "namespace": "codefresh"
                        },
                        "installationStatus": "COMPLETED",
                        "installationType": "HELM",
                        "ingressHost": "http://host.docker.internal:8080",
                        "runtimeVersion": "0.1.71"
                    }
                }
            }
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/api/argo-runtime",
            "body": {
                "name": "test-runtime"
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "token": "example-runtime-token"
            }
        }
    },
    {
        "httpRequest": {
            "method": "GET",
            "path": "/api/argo-runtime/test-runtime/storeKey"
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "storeKey": "example-runtime-token"
            }
        }
    },
    {
        "httpRequest": {
            "method": "GET",
            "path": "/api/ping"
        },
        "httpResponse": {
            "statusCode": 200
        }
    },
    {
        "httpRequest": {
            "method": "POST",
            "path": "/2.0/api/graphql",
            "body": {
                "query": "\\n  query PromotionData(\\n    $srcRuntime: String!\\n    $srcNamespace: String!\\n    $srcName: String!\\n    $destRuntime: String!\\n    $destNamespace: String!\\n    $destName: String!\\n  ) {\\n    srcApp: application(runtime: $srcRuntime, namespace: $srcNamespace, name: $srcName) {\\n      metadata {\\n        name\\n        cluster\\n        namespace\\n      }\\n      specSource {\\n        repoURL\\n        targetRevision\\n        path\\n      }\\n    }\\n    destApp: application(runtime: $destRuntime, namespace: $destNamespace, name: $destName) {\\n      metadata {\\n        name\\n        cluster\\n        namespace\\n      }\\n      specSource {\\n        repoURL\\n        targetRevision\\n        path\\n      }\\n    }\\n    promotionTemplate(runtime: $destRuntime, namespace: $destNamespace, name: $destName) {\\n      promotion {\\n        glob\\n        jsonPaths\\n      }\\n      versionSource {\\n        file\\n        jsonPath\\n      }\\n    }\\n  }\\n",
                "variables": {
                    "srcRuntime": "test-runtime",
                    "srcNamespace": "codefresh",
                    "srcName": "simple-dev",
                    "destRuntime": "test-runtime",
                    "destNamespace": "codefresh",
                    "destName": "simple-prod"
                }
            }
        },
        "httpResponse": {
            "statusCode": 200,
            "body": {
                "data": {
                    "srcApp": {
                        "metadata": {
                            "name": "simple-dev",
                            "cluster": "https://kubernetes.default.svc",
                            "namespace": "codefresh"
                        },
                        "specSource": {
                            "repoURL": "http://gitea-http.gitea:3000/test-owner/simple-app.git",
                            "targetRevision": "dev",
                            "path": "."
                        }
                    },
                    "destApp": {
                        "metadata": {
                            "name": "simple-prod",
                            "cluster": "https://kubernetes.default.svc",
                            "namespace": "codefresh"
                        },
                        "specSource": {
                            "repoURL": "http://gitea-http.gitea:3000/test-owner/simple-app.git",
                            "targetRevision": "HEAD",
                            "path": "."
                        }
                    },
                    "promotionTemplate": {
                        "promotion": [],
                        "versionSource": {
                            "file": "",
                            "jsonPath": ""
                        }
                    }
                }
            }
        }
    }
]
